name: rhkr8521 CI/CD to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: stockmate-frontend
  ECS_CLUSTER: StockMate-Frontend
  ECS_SERVICE: stockmate-frontend-service
  ECS_TASK_DEFINITION: ecs/taskdef.json
  CONTAINER_NAME: stockmate-frontend

permissions:
  contents: read

jobs:
  build-and-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV }}" > .env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
        
      - name: Enable pnpm via Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9.12.0 --activate   # package.json에 packageManager가 있으면 생략 가능
          pnpm -v
          which pnpm

      - name: Check pnpm
        run: |
          which pnpm
          pnpm -v
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build production bundle
        run: pnpm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:            ${{ env.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          docker build -t $ECR_URI:$IMAGE_TAG .
          docker push $ECR_URI:$IMAGE_TAG
          echo "image=$ECR_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region:            ${{ env.AWS_REGION }}
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Render new Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name:  ${{ env.CONTAINER_NAME }}
          image:           ${{ needs.build-and-push.outputs.image }}

      - name: Deploy new Task Definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service:                    ${{ env.ECS_SERVICE }}
          cluster:                    ${{ env.ECS_CLUSTER }}
          task-definition:            ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true
